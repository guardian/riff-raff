import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider
import software.amazon.awssdk.services.cloudformation.CloudFormationClient
import software.amazon.awssdk.services.cloudformation.model.*
import software.amazon.awssdk.regions.Region

import scala.jdk.CollectionConverters.*

object GenerateCfnTypes {

  /** Downloads the CFN listTypes from AWS for a given region
    * @return
    *   a compilable scala file containing the types as a Map
    */
  def generate(
      packageName: String,
      objectName: String,
      regions: List[String],
      profileName: String
  ): String = {

    s"""// This file is generated by ${getClass.getName}
      |// It is a cache of AWS CloudFormation types for the given regions
      |// if it is present for your region, it will save roughly 7 seconds per deploy across all concurrent deploys.
      |// run `sbt lib/generateTypes <awsProfileName>` to regenerate it
      |
      |package $packageName
      |
      |object $objectName {
      |  val regionTypes: Map[String, Set[String]] = Map(
      |    ${getTypes(regions, profileName)
        .map { case (region, types) =>
          s""""$region" ->
      |      Set(
      |        ${types.map(t => s""""$t"""").mkString(",\n        ")}
      |      )""".stripMargin
        }
        .mkString(",\n      ")}
      |  )
      |}
      |""".stripMargin
  }

  private def getTypes(regions: List[String], profileName: String) = {
    regions.map { region =>
      lazy val client = CloudFormationClient
        .builder()
        .credentialsProvider(
          ProfileCredentialsProvider.builder().profileName(profileName).build()
        )
        .region(Region.of(region))
        .build()

      val request = ListTypesRequest
        .builder()
        .visibility(Visibility.PUBLIC)
        .`type`(RegistryType.RESOURCE)
        .filters(
          TypeFilters
            .builder()
            .category(Category.AWS_TYPES)
            .build()
        )
        .build()
      val response = client.listTypesPaginator(request)
      val typesForRegion =
        response.typeSummaries().asScala.map(_.typeName()).toSet
      region -> typesForRegion
    }.toMap
  }
}
