# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                               controllers.Application.index

GET         /deployinfo/data                                controllers.Application.deployInfoData

# Docs
GET         /docs/                                          controllers.Application.documentation(resource="")
GET         /docs/*resource                                 controllers.Application.documentation(resource:String)

GET         /configuration/validation                       controllers.Application.validationForm
POST        /configuration/validation                       controllers.Application.validateConfiguration

# Preview endpoints
GET         /preview/yaml                                   controllers.PreviewController.preview(project:String,build:String,stage:String,deployments:Option[String],updateStrategy:magenta.Strategy)
GET         /preview/yaml/showTasks                         controllers.PreviewController.showTasks(previewId:String)

# Deployment pages
GET         /deployment/request                             controllers.DeployController.deploy
POST        /deployment/request                             controllers.DeployController.processForm
POST        /deployment/:uuid/stop                          controllers.DeployController.stop(uuid)
GET         /deployment/confirm                             controllers.DeployController.deployConfirmation(parametersJson:String)
GET         /deployment/externalRequest                     controllers.DeployController.deployConfirmationExternal
GET         /deployment/deployAgain                         controllers.DeployController.deployAgain
GET         /deployment/deployAgain/:uuid                   controllers.DeployController.deployAgainUuid(uuid:String)

GET         /deployment/history                             controllers.DeployController.history()
GET         /deployment/history/update                      controllers.DeployController.historyContent()
GET         /deployment/history/graphData                   controllers.Api.historyGraph

GET         /deployment/view/:uuid                          controllers.DeployController.viewUUID(uuid:String, verbose:Boolean?=false)
POST        /deployment/markAsFailed                        controllers.DeployController.markAsFailed
GET         /deployment/updates/:uuid                       controllers.DeployController.updatesUUID(uuid:String)

GET         /deployment/request/autoComplete/project        controllers.DeployController.autoCompleteProject(term:String)
GET         /deployment/request/autoComplete/build          controllers.DeployController.autoCompleteBuild(project:String,term:String)
GET         /deployment/request/history                     controllers.DeployController.deployHistory(project:String, stage:Option[String], isExactMatchProjectName:Option[Boolean])
GET         /deployment/request/allowedStages               controllers.DeployController.allowedStages(project: String, id: String)
GET         /deployment/request/buildInfo                   controllers.DeployController.buildInfo(project: String, build: String)


GET         /deployment/dashboard                           controllers.DeployController.dashboard(projects:String, search:Boolean?=false)
GET         /deployment/dashboard/content                   controllers.DeployController.dashboardContent(projects:String, search:Boolean?=false)

GET         /deployment/request/deployConfig                controllers.DeployController.deployConfig(projectName:String, id:String)
GET         /deployment/request/deployFiles                 controllers.DeployController.deployFiles(projectName:String, id:String)
GET         /deployment/request/artifactFile/*key           controllers.DeployController.getArtifactFile(key:String)

# Continuous deployment
GET         /deployment/continuous                          controllers.ContinuousDeployController.list
GET         /deployment/continuous/new                      controllers.ContinuousDeployController.form
POST        /deployment/continuous/save                     controllers.ContinuousDeployController.save
GET         /deployment/continuous/:id/edit                 controllers.ContinuousDeployController.edit(id)
POST        /deployment/continuous/:id/delete               controllers.ContinuousDeployController.delete(id)

# Post deploy hooks
GET         /deployment/hooks                               controllers.HooksController.list
GET         /deployment/hooks/new                           controllers.HooksController.form
POST        /deployment/hooks/save                          controllers.HooksController.save
GET         /deployment/hooks/edit                          controllers.HooksController.edit(id)
POST        /deployment/hooks/delete                        controllers.HooksController.delete(id)

# Restrictions
GET         /deployment/restrictions                        controllers.Restrictions.list
GET         /deployment/restrictions/new                    controllers.Restrictions.form
POST        /deployment/restrictions/save                   controllers.Restrictions.save
GET         /deployment/restrictions/edit                   controllers.Restrictions.edit(id)
POST        /deployment/restrictions/delete                 controllers.Restrictions.delete(id)

# Schedules
GET         /deployment/schedule                            controllers.ScheduleController.list
GET         /deployment/schedule/new                        controllers.ScheduleController.form
POST        /deployment/schedule/save                       controllers.ScheduleController.save
GET         /deployment/schedule/:id/edit                   controllers.ScheduleController.edit(id)
POST        /deployment/schedule/:id/delete                 controllers.ScheduleController.delete(id)

# Target
GET         /deployment/target/find                         controllers.TargetController.findMatch(region: String, stack: String, app: String)
GET         /deployment/target/deploy                       controllers.TargetController.findAppropriateDeploy(region: String, stack: String, app: String, stage: String)
GET         /deployment/target/select                       controllers.TargetController.selectRecentVersion(targetKey: String, projectName: String, stage: String)

# authentication endpoints
GET         /profile                                        controllers.Login.profile
GET         /login                                          controllers.Login.login
GET         /loginAction                                    controllers.Login.loginAction
GET         /oauth2callback                                 controllers.Login.oauth2Callback
GET         /logout                                         controllers.Login.logout

# api endpoints
GET         /apiKeys/list                                   controllers.Api.listKeys
GET         /apiKeys/create                                 controllers.Api.createKeyForm
POST        /apiKeys/create                                 controllers.Api.createKey
POST        /apiKeys/delete                                 controllers.Api.delete

GET         /api/history                                    controllers.Api.history
GET         /api/deploy/view                                controllers.Api.view(uuid:String)
POST        /api/deploy/request                             controllers.Api.deploy
POST        /api/deploy/stop                                controllers.Api.stop
POST        /api/validate                                   controllers.Api.validate

# Testing pages (for changing styling without running deploys)
GET         /testing/reportTestPartial                      controllers.Testing.reportTestPartial(take:Int ?= 20, verbose:Boolean ?= false)
GET         /testing/form                                   controllers.Testing.form
POST        /testing/formPost                               controllers.Testing.formPost
GET         /testing/uuidList                               controllers.Testing.uuidList(limit:Int ?= 500)
GET         /testing/s3Latency                              controllers.Testing.S3LatencyList(csv:Boolean=false)
GET         /testing/s3Latency/csv                          controllers.Testing.S3LatencyList(csv:Boolean=true)
POST        /testing/actionUUID                             controllers.Testing.actionUUID
GET         /testing/view/:uuid                             controllers.Testing.debugLogViewer(uuid)
GET         /testing/addStringUUID                          controllers.Testing.transferAllUUIDs
GET         /testing/testcharset                            controllers.Testing.testcharset
GET         /testing/deployinfo                             controllers.Testing.hosts
GET         /testing/running                                controllers.Testing.runningDeploys
GET         /builds                                         controllers.DeployController.builds

# Javascript routing
GET         /assets/javascripts/routes                      controllers.Application.javascriptRoutes

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                   controllers.Assets.versioned(path="/public", file: Asset)

# Management endpoints
POST        /requestShutdown                                controllers.Management.requestShutdown()
POST        /requestInstanceRotation                        controllers.Management.requestInstanceRotation()
